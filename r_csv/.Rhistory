library(datasets)  # Load built-in datasets
head(iris)         # Show the first six lines of iris data
summary(iris)      # Summary statistics for iris data
plot(iris)         # Scatterplot matrix for iris data
# Clear plots
dev.off()  # But only if there IS a plot
# I recommend "pacman" for managing add-on packages. It will
# install packages, if needed, and then load the packages.
install.packages("pacman")
# Or, by using "pacman::p_load" you can use the p_load
# function from pacman without actually loading pacman.
# These are packages I load every time.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
# Clear console
cat("\014")  # ctrl+L
head(iris)
?plot  # Help for plot()
plot(iris$Species)  # Categorical variable
plot(iris$Petal.Length)  # Quantitative variable
plot(iris$Species, iris$Petal.Width)  # Cat x quant
plot(iris$Petal.Length, iris$Petal.Width)  # Quant pair
plot(iris)  # Entire data frame
# Plot with options
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Iris: Petal Length vs. Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
plot(cos, 0, 2*pi)
plot(exp, 1, 5)
plot(dnorm, -3, +3)
# Formula plot with options
plot(dnorm, -3, +3,
col = "#cc0000",
lwd = 5,
main = "Standard Normal Distribution",
xlab = "z-scores",
ylab = "Density")
?mtcars
?mtcars
library(datasets)
?mtcars
head(mtcars)
# Need a table with frequencies for each category
cylinders <- table(mtcars$cyl)  # Create table
barplot(cylinders)              # Bar chart
library(datasets)
?iris
head(iris)
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
# Histograms for each species using options
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
hist(iris$Petal.Width [iris$Species == "versicolor"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Versicolor",
xlab = "",
col = "purple")
hist(iris$Petal.Width [iris$Species == "versicolor"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Versicolor",
xlab = "",
col = "purple")
# Histograms for each species using options
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
hist(iris$Petal.Width [iris$Species == "versicolor"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Versicolor",
xlab = "",
col = "purple")
hist(iris$Petal.Width [iris$Species == "virginica"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Virginica",
xlab = "",
col = "blue")
# Histograms for each species using options
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
hist(iris$Petal.Width [iris$Species == "versicolor"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Versicolor",
xlab = "",
col = "purple")
hist(iris$Petal.Width [iris$Species == "virginica"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Virginica",
xlab = "",
col = "blue")
# Histograms for each species using options
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
hist(iris$Petal.Width [iris$Species == "virginica"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Virginica",
xlab = "",
col = "blue")
# Restore graphic parameter
par(mfrow=c(1, 1))
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
?mtcars
head(mtcars)
library(datasets)  # Load/unload base packages manually
?mtcars
head(mtcars)
# Good to first check univariate distributions
hist(mtcars$wt)
hist(mtcars$mpg)
# Basic X-Y plot for two quantitative variables
plot(mtcars$wt, mtcars$mpg)
# Add some options
plot(mtcars$wt, mtcars$mpg,
pch = 19,         # Solid circle
cex = 1.5,        # Make 150% size
col = "#cc0000",  # Red
main = "MPG as a Function of Weight of Cars",
xlab = "Weight (in 1000 pounds)",
ylab = "MPG")
library(datasets)  # Load/unload base packages manually
# Annual Canadian Lynx trappings 1821-1934
?lynx
head(lynx)
# Default
hist(lynx)
# Add some options
hist(lynx,
breaks = 14,          # "Suggests" 14 bins
freq   = FALSE,       # Axis shows density, not freq.
col    = "thistle1",  # Color for histogram
main   = paste("Histogram of Annual Canadian Lynx",
"Trappings, 1821-1934"),
xlab   = "Number of Lynx Trapped")
# Add a normal distribution
curve(dnorm(x, mean = mean(lynx), sd = sd(lynx)),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)        # Superimpose on previous graph
# Add two kernel density estimators
lines(density(lynx), col = "blue", lwd = 2)
# Add a rug plot
rug(lynx, lwd = 2, col = "gray")
library(datasets)  # Load/unload base packages manually
head(iris)
summary(iris$Species)       # Categorical variable
summary(iris$Sepal.Length)  # Quantitative variable
summary(iris)               # Entire data frame
q()
head(iris)
?plot  # Help for plot()
plot(iris$Species)  # Categorical variable
plot(iris$Species, iris$Petal.Width)  # Cat x quant
plot(iris$Petal.Length)  # Quantitative variable
plot(iris$Species, iris$Petal.Width)  # Cat x quant
plot(iris$Petal.Length, iris$Petal.Width)  # Quant pair
plot.xy
?plot
plot(sin,x,y,main=test, xlab=x, ylab=y)
plot(sin,main=test, xlab=x, ylab=y)
?plot.function
?plot.function
data()
data(cars)
force(cars)
plot(cars$speed,cars$dist)
plot(cars$speed,cars$dist,xlab='Speed', ylab='Distance')
plot(cars$speed,cars$dist,xlab='Speed', ylab='Distance', main='Car Speed and Stopping Distance')
plot(cars$speed,cars$dist,xlab='Speed', ylab='Distance', main='Car Speed and Stopping Distance',type='p')
plot(cars$speed,cars$dist,xlab='Speed', ylab='Distance', main='Car Speed and Stopping Distance',type='o')
plot(cars$speed,cars$dist,xlab='Speed', ylab='Distance', main='Car Speed and Stopping Distance',type='p')
plot(cos,0,2*pi)
plot(cos,0,2*pi,col='#cc0000',lwd=5)
plot(cos,0,2*pi,col='#cc0000',lwd=2)
plot(cos,0,2*pi,col='#cc0000',lwd=2,main='Cos Plot')
plot(cos,0,2*pi,col='#cc0000',lwd=2,main='Cos Plot',xlab='Cos')
plot(cos,0,2*pi,col='#cc0000',lwd=2,main='Cos Plot')
plot(exp,1,5)
plot(exp,1,5,main='Exp Plot', lwd=2)
plot(exp,1,5,main='Exp Plot', lwd=2,col=2)
plot(dnorm,-3,+3,main='Normal Distribution',xlab='X',ylab='Y',col=3,lwd=2)
library(datasets)
?mtcars
head(mtcars)
# Need a table with frequencies for each category
cylinders <- table(mtcars$cyl)  # Create table
barplot(cylinders)              # Bar chart
plot(cylinders)                 # Default X-Y plot (lines)
barplot(cylinders)              # Bar chart
library(datasets)
?iris
head(iris)
hist(iris$Sepal.Length)
# Histograms for each species using options
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
hist(iris$Petal.Width [iris$Species == "versicolor"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Versicolor",
xlab = "",
col = "purple")
hist(iris$Petal.Width [iris$Species == "virginica"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Virginica",
xlab = "",
col = "blue")
# Histograms for each species using options
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
x==7
x <- 5
x==7
x==5
Gender <- c('M','F','F')
class(Gender)
Gender <- factor(Gender)
class(Gender)
x <- 2,4,6
x <- (2,4,6)
x <- ('2','4','6')
x <- num('2','4','6')
x <- ('2','4','6')
y <- seq(5,7)
x <- (2,4,6)
x <- numeric(2,4,6)
x = (2,4,6)
x <- (2,4,6)
x <- 2,4,6
x <- 2,4,6
x <- '2','4','6'
x <- "2","4","6"
x <- (4,5,6)
data1 <- data.frame(x,y,Gender)
View(data1)
mean(data1$x)
x <- 2,4,6
x <- ('2,4,6')
x <- ('2','4','6')
x <- ('2')
x <- (2)
x <- (2),(4),(6)
x <- (2,4,6)
x <- ('2,4,6')
data1 <- data.frame(x,y,Gender)
x <- 2,4,6
x <- '2,4,6'
data1 <- data.frame(x,y,Gender)
x <- '2','4','6'
x <- ('2','4','6')
x <- ('2')
x <- ('2'),('4')
x <- ('2')('4')
x <- (2,4,6)
x = (2,4,6)
x = ('2','4','6')
x <- 2
x <- 2,4
x <- 2,4,6
getwd()
x <- c('2','4','6')
x <- n('2','4','6')
x <- v('2','4','6')
x <- ('2','4','6')
x <- int('2','4','6')
x <- integer('2','4','6')
x <- integer(2,4,6)
x <- 1
y <- 2
z = 1
sum(x,y)
sum(x,y,z)
sum(x,2*y,z)
sum (x,y,z)
sum(x,2*y,z)
x <- 2
y <- 1
x <- 1
sum(x,2*y,z)
z <- 1
sum(x,2*y,z)
x <- 2
y <- 1
z <- 1
sum(x,2*y,z)
sum(1,2*2,z)
if (z!=1){print('1')}else{print('0')}
if (z!=1){print('z')}else{print('1')}
sum3 <- function(x,y,z=1) {ans=x+2*y+z return(ans)}
sum3 <- function(x,y,z=1) {ans=x+2*y+z return(ans)}
sum3(1,2)
sum3(1, 2)
sum3(1, 2)
sum3
sum3 <- function(x, y, z=1) { ans = x+ 2*y +z return(ans) }
sum3 <- function(x, y, z=1) { ans = x+ 2*y +z return(ans) }
sum3 <- function(x, y, z = 1) { ans = x+ 2*y +z return(ans) }
sum3 <- function(x, y, z = 1) {
return(x+ 2*y +z )
}
sum3(1,2)
sum3(2,1,-1)
sum3(1)
sum3 <- function(x, y, z = 1) { return(x+ 2*y +z )}
sum3(1)
sum3
mtcar
load mtcars
mtcars
data1 <-mtcars
View(data1)
?mtcars
baby1
# Create variable names for the three columns in baby_data.
names(baby_data) <- c("ID","Age","Weight")
# Create variable names for the three columns in baby_data.
names(baby_data) <- c("ID","Age","Weight")
# Create a dataset with 3 columns.
baby_data <- data.frame(id, age, weight)
# Create variable names for the three columns in baby_data.
names(baby_data) <- c("ID","Age","Weight")
# Create a dataset with 3 columns.
baby_data <- data.frame(id, age, weight)
# Create a dataset with 3 columns.
baby_data <- data.frame(id, age, weight)
View(data1)
# Create a vector of baby's age in months.
age <- c(1,3,5,2,11,9,3,9,12,3)
# Create a corresponding vector of baby's weight in kg.
weight <- c(4.4,5.3,7.2,5.2,8.5,7.3,6.0,10.4,10.2,6.1)
id <- seq(1,10)
# Create a dataset with 3 columns.
baby_data <- data.frame(id, age, weight)
View(baby_data)
?write.csv
# Prevents R from adding row names to each row.
write.csv(baby_data, file = "baby.csv", row.names=F)
# Create a dataset with 3 columns.
baby_data <- data.frame(id, age, weight)
View(baby_data)
mtcars
mtcars
mtcars
View(baby_data)
View(data1)
library(rmarkdown)
getwd
getwd()
tinytex::install_tinytex()
Occupation <- read.csv("C:/Users/T460S/Desktop/Studies/SIM 13OCT20/Year 3/ST 3189 Thurs 830am/Lectures/Lecture 3 Linear Reg (Part 2)/Understanding Dummy Variables/Occupation.csv")
View(Occupation)
levels(Occupation$Occ)
levels(Occupation$Occ) [Manager]
levels(Occupation)
levels(Occupation$Occ)
levels(Occupation$Occ.Code)
levels(Occupation$Occ)<-c("Manager","Clerk","Director","CEO")
relevel(Occupation$Occ)<-c("Manager","Clerk","Director","CEO")
relevel (Occupation$Occ)<-c("Manager","Clerk","Director","CEO")
1 <- lm(Occupation$Salary ~ Occupation$Occ)
Occupation$Occ <- factor(Occupation$Occ)
relevel (Occupation$Occ)<-c("Manager","Clerk","Director","CEO")
levels(Occupation$Occ)
checkwd
setwd
setwd('C:/Users/T460S/st2195_assignment_2/r_csv')
wd
install.packages("rvest")
library(rvest)
library(dplyr)
link = "https://en.wikipedia.org/wiki/Comma-separated_values"
page = read.html(link)
page = read_html(link)
table = page %>% html_nodes(xpath="//*[@id="mw-content-text"]/div[1]/table[2]")
table = page %>% html_nodes(xpath="//*[@id="mw-content-text"]/div[1]/table[2]/tbody")
table = page %>% html_nodes(xpath='//*[@id="mw-content-text"]/div[1]/table[2]') %>%
q
page %>% html_nodes(xpath='//*[@id="mw-content-text"]/div[1]/table[2]') %>%
yes
tables = link %>%html_table()
tables = link %>% html_element("//*[@id="mw-content-text"]/div[1]/table[2]") %>% html_table()
tables = link %>% html_element(xpath="//*[@id="mw-content-text"]/div[1]/table[2]") %>% html_table()
table <- link %>% html_element("//*[@id="mw-content-text"]/div[1]/table[2]")
table <- link %>% html_element("//*[@id="mw-content-text"]/div[1]/table[2]/tbody")
table = html_nodes(xpath='//*[@id="mw-content-text"]/div[1]/table[2]/tbody')
table = html_nodes(xpath='//*[@id="mw-content-text"]/div[1]/table[2]')
page %>%
html_nodes(xpath="//*[@id="mw-content-text"]/div[1]/table[2]") %>%
page %>% html_nodes(xpath='//*[@id="mw-content-text"]/div[1]/table[2]') %>%
q
table = page %>% html_nodes(xpath='td , th') %>%
q
table = page %>% html_nodes(xpath='td , th') %>% html_table()
View(table)
table = page %>% html_nodes(xpath='//td | //th') %>% html_table()
table = page %>% html_nodes(xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "wikitable", " " ))]//*[(((count(preceding-sibling::*) + 1) = 1) and parent::*)]') %>% html_table()
table = page %>% html_nodes(xpath='//*[@id="mw-content-text"]/div[1]/table[2]') %>% html_table()
View(table)
table = data.frame(table)
View(table)
setwd('C:/Users/T460S/st2195_assignment_2/r_csv')
library(rvest)
library(dplyr)
link = "https://en.wikipedia.org/wiki/Comma-separated_values"
page = read_html(link)
table = page %>% html_nodes(xpath='//*[@id="mw-content-text"]/div[1]/table[2]') %>% html_table()
View(table)
data = data.frame(table)
View(data)
View(data)
write.csv(data,"C:/Users/T460S/st2195_assignment_2/r_csv/data.csv", row.names=FALSE)
